// server/migrate-data.js

const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
require('dotenv').config(); // Load environment variables from .env file

// Load Mongoose Models
const User = require('./models/User');
const Product = require('./models/Product');
const CartItem = require('./models/CartItem');

// --- Configuration ---
// Make sure you have a .env file in your 'server' directory
// with MONGODB_URI="mongodb+srv://<username>:<password>@<cluster-name>.mongodb.net/<database-name>?retryWrites=true&w=majority&appName=Cluster0"
const mongoURI = process.env.MONGODB_URI;

// Path to your db.json file
// This assumes db.json is in the project's root directory (one level up from 'server')
const dbJsonPath = path.join(__dirname, '..', 'db.json');

// --- Migration Script ---
async function migrateData() {
  try {
    if (!mongoURI) {
      throw new Error('MONGODB_URI is not defined in your .env file.');
    }

    console.log('Connecting to MongoDB...');
    await mongoose.connect(mongoURI, {
      // These options are deprecated but harmless, can be removed if you wish
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected.');

    // 1. Read db.json
    const dbData = JSON.parse(fs.readFileSync(dbJsonPath, 'utf-8'));
    console.log('db.json loaded.');

    // 2. Clear existing data (optional, but recommended for clean migration)
    console.log('Clearing existing collections...');
    await Promise.all([
      User.deleteMany({}),
      Product.deleteMany({}),
      CartItem.deleteMany({}),
    ]);
    console.log('Collections cleared.');

    // 3. Migrate Users
    console.log('Migrating users...');
    const oldUserIdToNewObjectIdMap = {};
    for (const oldUser of dbData.users) {
      const newUser = new User({
        username: oldUser.username,
        password: oldUser.password, // IMPORTANT: Hash passwords in a real app before saving!
        name: oldUser.name,
        email: oldUser.email,
        // _id will be auto-generated by Mongoose
      });
      const savedUser = await newUser.save();
      oldUserIdToNewObjectIdMap[oldUser.id] = savedUser._id;
    }
    console.log(`Migrated ${Object.keys(oldUserIdToNewObjectIdMap).length} users.`);

    // 4. Migrate Products
    console.log('Migrating products...');
    const oldProductIdToNewObjectIdMap = {};
    const productCategories = ['laptops', 'smart_phones', 'smart_watches', 'accessories', 'gaming_consoles'];

    // Determine featured product IDs from db.json's "featured_products" array
    // The `refId` in db.json's `featured_products` seems to point to the `id` in the category lists.
    const featuredProductIds = new Set(dbData.featured_products.map(fp => fp.refId));

    let totalProductsMigrated = 0;
    // Iterate through each category in db.json
    for (const categoryName of productCategories) {
      if (dbData[categoryName]) { // Check if the category exists in db.json
        for (const oldProduct of dbData[categoryName]) {
          const newProduct = new Product({
            name: oldProduct.name,
            brand: oldProduct.brand,
            model: oldProduct.model,
            // FIX: Assign the category based on the array it was found in
            category: categoryName,
            price: oldProduct.price,
            currency: oldProduct.currency,
            rating: oldProduct.rating,
            reviews: oldProduct.reviews,
            image: oldProduct.image,
            specifications: oldProduct.specifications,
            isFeatured: featuredProductIds.has(oldProduct.id), // Set isFeatured based on original db.json refId
          });
          const savedProduct = await newProduct.save();
          oldProductIdToNewObjectIdMap[oldProduct.id] = savedProduct._id;
          totalProductsMigrated++;
        }
      }
    }
    console.log(`Migrated ${totalProductsMigrated} products.`);

    // 5. Migrate Cart Items
    console.log('Migrating cart items...');
    let migratedCartItemsCount = 0;
    for (const oldCartItem of dbData.cart) {
      const newUserId = oldUserIdToNewObjectIdMap[oldCartItem.userId];
      const newProductId = oldProductIdToNewObjectIdMap[oldCartItem.productId];

      if (!newUserId) {
        console.warn(`Skipping cart item ${oldCartItem.id}: User with old ID ${oldCartItem.userId} not found in map.`);
        continue;
      }
      if (!newProductId) {
        console.warn(`Skipping cart item ${oldCartItem.id}: Product with old ID ${oldCartItem.productId} not found in map.`);
        continue;
      }

      const newCartItem = new CartItem({
        userId: newUserId,
        productId: newProductId,
        category: oldCartItem.category, // Assuming cart items already have category
        quantity: oldCartItem.quantity,
      });
      await newCartItem.save();
      migratedCartItemsCount++;
    }
    console.log(`Migrated ${migratedCartItemsCount} cart items.`);

    console.log('Data migration complete!');

  } catch (error) {
    console.error('Data migration failed:', error);
  } finally {
    console.log('Closing MongoDB connection.');
    await mongoose.disconnect();
  }
}

// Run the migration
migrateData();